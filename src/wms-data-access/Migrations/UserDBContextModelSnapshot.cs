// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WMSDataAccess.UserManagement.DBContexts;

namespace wmsDataAccess.Migrations
{
    [DbContext(typeof(UserDBContext))]
    partial class UserDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:PostgresExtension:POSTGIS", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WMSDataAccess.UserManagement.Entities.WMSLayers", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("datasourcename");

                    b.Property<string>("description");

                    b.Property<string>("extent");

                    b.Property<bool>("ispublic");

                    b.Property<string>("layername");

                    b.Property<string>("layertype");

                    b.Property<string>("projection");

                    b.Property<string>("username");

                    b.HasKey("id");

                    b.ToTable("wmslayers");
                });

            modelBuilder.Entity("WMSDataAccess.UserManagement.Entities.WMSMaps", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("center");

                    b.Property<string>("mapfile");

                    b.Property<string>("mapname");

                    b.Property<string>("mapprojection");

                    b.Property<string>("username");

                    b.Property<short>("zoom");

                    b.HasKey("id");

                    b.HasIndex("username");

                    b.ToTable("maps");
                });

            modelBuilder.Entity("WMSDataAccess.UserManagement.Entities.WMSUser", b =>
                {
                    b.Property<string>("username")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("creationdate")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("CURRENT_DATE");

                    b.Property<string>("hashedpassword");

                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("salt");

                    b.Property<string>("useremail")
                        .IsRequired();

                    b.Property<string>("userfullname");

                    b.HasKey("username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("wmsDataAccess.UserManagement.Entities.WMSMapsLog", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("logdate");

                    b.Property<string>("mapcontent");

                    b.Property<string>("mapname");

                    b.Property<string>("username");

                    b.HasKey("id");

                    b.ToTable("mapslog");
                });

            modelBuilder.Entity("WMSDataAccess.UserManagement.Entities.WMSMaps", b =>
                {
                    b.HasOne("WMSDataAccess.UserManagement.Entities.WMSUser")
                        .WithMany("maps")
                        .HasForeignKey("username");
                });
#pragma warning restore 612, 618
        }
    }
}
